name: "Scenario"
description: "Propose a scenario"
title: "Scenario: {{scenario_description}}"
labels: ["Architecture", "Project Documentation", "UI/UX", "[Scenario]"]

body:
  - type: markdown
    attributes:
      value: |
        Thanks for proposing a new scenario!
    
        In the issue title, replace `{{scenario_description}}` with a short scenario description in the format `Actor does something`.
    
        See examples of names in this format in existing [Scenario issues](https://github.com/team-work-tools/team-work-telegram-bot/issues?q=is%3Aopen+is%3Aissue+label%3AScenario).
        
        Use the terms from the [glossary](https://github.com/team-work-tools/team-work-telegram-bot/blob/main/docs/glossary.md).
  - type: textarea
    id: details
    attributes:
      label: Details
      placeholder: |
        Explain the scenario here!
    validations:
      required: true
  - type: markdown
    attributes:
      value: |
        The scenario details MUST be written.

        Links to related issues, PRs, artifacts, files, etc. MAY be included.

        Acceptance criteria SHOULD be written.
  - type: textarea
    id: subtasks
    attributes:
      label: Subtasks
      placeholder: List subtasks here!
    validations:
      required: true
  - type: markdown
    attributes:
      value: |
        Clear and actionable subtasks MUST be listed in a single-level checkbox list (`Subtask list`) with at least one item.

        Each list item MUST be one of these:

        - A link to an issue.
          - Example:

            ```text
            - [ ] https://github.com/team-work-tools/team-work-telegram-bot/issues/42
            ```

        - An identifier of an issue.
          - Example:

            ```text
            - [ ] #42
            ```

        - A textual description of a subtask (`Textual subtask`).
          - Rules:
          - The description MUST NOT:
            - include checkboxes;
            - end with a list item.

          - Example:

            ```text
            - [ ] Do Foo
            ```

        If a Textual subtask seems to require its own subtasks, a new Task issue MUST be created for this subtask. The Textual subtask MUST then be replaced with a link to the new issue.

        For each Textual subtask that was worked on, there MUST be evidence of the work.

        - One of these rules MUST be applied as best matches the case:
          - If the subtask was worked on in a (merged) PR, a link to the PR MUST be provided.
          - If the subtask requires making a decision, GitHub usernames of the decision-makers, a link to the decision, and the reasoning behind the decision MUST be provided.
          - If the subtask is about producing or updating an artifact, a (perma)link to that (updated) artifact MUST be provided.
          - If the subtask was completed for some other reason, that reason MUST be provided.
        - Evidence MUST be written in one of these formats:
          - In parentheses after the Textual subtask.
          - In a sublist under the Textual subtask.

        A subtask is completed when:

        - It is a Textual subtask and the evidence shows the subtask was completed, e.g., the PR was merged, the decision was made, etc.
        - It is not a Textual subtask and the issue is closed.

        When a subtask is completed, the subtask checkbox in the Subtask list MUST be ticked.

        Example of a Subtask list:
        
        ```text
        - [x] Do 42 ({{ link to a PR that completed this subtask }})
        - [x] #42
        - [x] {{ link to the issue #42 }}
        - [x] Decide with developers whether to use Foo or Bar.
            - @dev1, @dev2 decided to use Foo because Bar can't do blah-blah.
        - [x] Do Baz.
            - @dev1 decided to not do Baz due to lack of time.
        - [ ] Not yet completed
        ```
        
        This issue MUST be closed only when the Customer agrees the scenario is completed!

